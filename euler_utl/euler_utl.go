package euler_utl

import (
	"fmt"
	"math"

	"project_euler/euler_utl/el_math"
	"project_euler/logging"
)

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
// The sum of these multiples is 23.
//
// Find the sum of all the multiples of 3 or 5 below 1000.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
func P1(l *logging.Logger) (uint64, error) {

	pnum := 1
	l.Log(logging.Info, fmt.Sprintf("%s %d", "Start with Problem ", pnum))

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	sum3 := el_math.Sumdivisibleby(3, 999, l)
	sum5 := el_math.Sumdivisibleby(5, 999, l)
	// 15 is the first number that is a multiple of 3 and 5.
	// The sum of multiples of 15 must therefore be subtracted from the sum of 3 and 5
	// Otherwise they would count twice
	sum15 := el_math.Sumdivisibleby(15, 999, l)
	result := sum3 + sum5 - sum15
	l.Log(logging.Info, fmt.Sprintf("%s %d and % d lower %d = %d", "Sum of multiples from ", 3, 5, 1000, result))
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	return uint64(result), nil
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
func P2(l *logging.Logger) (uint64, error) {

	pnum := 2
	l.Log(logging.Info, fmt.Sprintf("%s %d", "Start with Problem ", pnum))

	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	const max_value = 4000000
	next_fib := 0.0
	term_1 := 1.0
	term_2 := 1.0
	result := 0.0
	// First fibonacci Number 1
	l.Log(logging.Info, fmt.Sprintf("Fibonacci Num: %d", 1))
	for next_fib < max_value {
		next_fib = term_1 + term_2
		l.Log(logging.Info, fmt.Sprintf("Fibonacci Num: %d", uint64(next_fib)))
		if math.Mod(float64(next_fib), float64(2)) == 0 {
			l.Log(logging.Debug, fmt.Sprintf("even-term: %d +%d = %d", uint(next_fib), uint(result), uint(result+next_fib)))
			result = result + next_fib

		}

		term_1 = term_2
		term_2 = next_fib
	}
	l.Log(logging.Info, fmt.Sprintf("%s %d", "Sum of the even-valued terms in the Fibonacci sequence is ", uint64(result)))
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	return uint64(result), nil
}
